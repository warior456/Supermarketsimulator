[gd_scene load_steps=18 format=3 uid="uid://bllubbo70cad2"]

[ext_resource type="PackedScene" uid="uid://2838j8s5yki5" path="res://src/objects/physicscube.tscn" id="1_1rqdy"]
[ext_resource type="PackedScene" uid="uid://c8lvl0m6jdy5x" path="res://src/levelparts/wall_6x3.tscn" id="1_ogh3o"]

[sub_resource type="Shader" id="Shader_fb1au"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.3.stable.mono's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform vec2 cloud_speed;
uniform vec2 cloud_speed2;
uniform vec3 cloud_distance;

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;
	
	vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, sky_uv * cloud_scale + TIME * cloud_direction * cloud_speed).rgb - texture(cloud_texture2, sky_uv * cloud_scale + TIME * cloud_direction2 * cloud_speed2).rgb;
	clouds = clouds - smoothstep(0.0, EYEDIR.y, cloud_distance);
	clouds = clamp(clouds,0,1);
	sky += clouds;


	COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_ttbgw"]
noise_type = 3
frequency = 0.0077

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_3x6m4"]
width = 2048
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_ttbgw")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_o0fvh"]
frequency = 0.005

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_cqmm6"]
width = 2048
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_o0fvh")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jblsv"]
shader = SubResource("Shader_fb1au")
shader_parameter/sky_top_color = Color(0.314536, 0.676072, 0.960203, 1)
shader_parameter/sky_horizon_color = Color(0.537099, 0.54549, 0.56228, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 0.7
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 0.560784)
shader_parameter/ground_bottom_color = Color(0.313726, 0.67451, 0.960784, 1)
shader_parameter/ground_horizon_color = Color(0.537255, 0.545098, 0.560784, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15
shader_parameter/exposure = 1.0
shader_parameter/cloud_direction = Vector2(-0.08, 0.19)
shader_parameter/cloud_direction2 = Vector2(0.055, -0.08)
shader_parameter/cloud_scale = Vector2(0.015, 0.03)
shader_parameter/cloud_speed = Vector2(0.005, 0.005)
shader_parameter/cloud_speed2 = Vector2(0.02, 0.02)
shader_parameter/cloud_distance = Vector3(0.025, 0.025, 0.025)
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_3x6m4")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_cqmm6")

[sub_resource type="Sky" id="Sky_w2qqb"]
sky_material = SubResource("ShaderMaterial_jblsv")

[sub_resource type="Environment" id="Environment_ln54k"]
background_mode = 2
sky = SubResource("Sky_w2qqb")
tonemap_mode = 2
fog_density = 0.1

[sub_resource type="BoxShape3D" id="BoxShape3D_oywka"]
size = Vector3(300, 0.1, 300)

[sub_resource type="BoxMesh" id="BoxMesh_o2dxx"]
size = Vector3(200, 0.1, 200)

[sub_resource type="Gradient" id="Gradient_xyeum"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_wwt16"]
noise_type = 5
seed = 120
frequency = 0.5

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_yk28b"]
width = 1024
height = 1024
seamless = true
color_ramp = SubResource("Gradient_xyeum")
noise = SubResource("FastNoiseLite_wwt16")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_haygq"]
albedo_color = Color(0.0745098, 0.521569, 0.0627451, 1)
albedo_texture = SubResource("NoiseTexture2D_yk28b")
uv1_scale = Vector3(100, 100, 100)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_1c4jk"]
next_pass = SubResource("StandardMaterial3D_haygq")
transparency = 1
albedo_color = Color(0.0745098, 0.521569, 0.0627451, 0.501961)
uv1_scale = Vector3(10, 10, 10)

[node name="Supermarket" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_ln54k")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.625, -0.345994, 0.699759, 0.739459, 0.0248451, 0.672743, -0.25015, 0.937908, 0.24032, 20, 24, 0)
light_color = Color(1, 1, 0.890196, 1)
shadow_enabled = true
directional_shadow_mode = 0
directional_shadow_max_distance = 50.0

[node name="solids" type="Node" parent="."]

[node name="floor" type="StaticBody3D" parent="solids"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="solids/floor"]
shape = SubResource("BoxShape3D_oywka")

[node name="MeshInstance3D" type="MeshInstance3D" parent="solids/floor"]
gi_mode = 2
mesh = SubResource("BoxMesh_o2dxx")
surface_material_override/0 = SubResource("StandardMaterial3D_1c4jk")

[node name="Wall6x3_" parent="solids" instance=ExtResource("1_ogh3o")]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -9, 1.5, 3)

[node name="Wall6x3_2" parent="solids" instance=ExtResource("1_ogh3o")]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -9, 1.5, -3)

[node name="Wall6x3_3" parent="solids" instance=ExtResource("1_ogh3o")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 6, 1.5, -6)

[node name="Wall6x3_4" parent="solids" instance=ExtResource("1_ogh3o")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -6, 1.5, -6)

[node name="Wall6x3_5" parent="solids" instance=ExtResource("1_ogh3o")]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 9, 1.5, -3)

[node name="Wall6x3_6" parent="solids" instance=ExtResource("1_ogh3o")]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 9, 1.5, 3)

[node name="Wall6x3_7" parent="solids" instance=ExtResource("1_ogh3o")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 6, 1.5, 6)

[node name="Wall6x3_8" parent="solids" instance=ExtResource("1_ogh3o")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -6, 1.5, 6)

[node name="objects" type="Node" parent="."]

[node name="PhysicsCube" parent="objects" instance=ExtResource("1_1rqdy")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3, 1, 0)

[node name="PhysicsCube2" parent="objects" instance=ExtResource("1_1rqdy")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2, 1, 2)

[node name="PhysicsCube3" parent="objects" instance=ExtResource("1_1rqdy")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -7, 1, 2)

[node name="PhysicsCube4" parent="objects" instance=ExtResource("1_1rqdy")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4, 1, 2)

[node name="PhysicsCube5" parent="objects" instance=ExtResource("1_1rqdy")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3, 1, -4)

[node name="PhysicsCube6" parent="objects" instance=ExtResource("1_1rqdy")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 6, 1, 0)
